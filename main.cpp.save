#include <iostream>
#include <fstream>
#include <sstream>
#include "parser.h"
#include "Codewriter.h"
#include <sys/stat.h>
#include <shlwapi.h>
#include <sys/stat.h>
#include <iterator>
#include <dirent.h>
#include <string>


using namespace std;
ifstream avmfile;// input avm file

bool IsPathExist(const string &s)// check if file or directory
{
    struct stat buffer;
    return (stat (s.c_str(), &buffer) == 0);
}

string fileList[1]; // put here list of file names /!\ fileList[0]=inputFileOrDir


void VMtranslate(string input, Codewriter assamblyfile)//gets file name as input and generates  .asm ASCI file
{

}


int main(int argc,char* argv[])
{
    string inputFileOrDir; // input file name
    inputFileOrDir=argv[1]; // get arg1
    fileList[0]=inputFileOrDir;

    if (IsPathExist(argv[1]))
    {//if directory
        Codewriter assamblyfile(fileList[0]+".asm"); // create a Codewriter object
        assamblyfile.WriteInit(); // write bootstrap code

        cout <<"it is a directory"<<endl;
        string currentFile;// stream out file names from the folder
        int i=1; // for if loop below (as index to fileList
        DIR *dr;
        struct dirent *en;
        dr = opendir(argv[1]); //open all directory
        if (dr)
        {
            while ((en = readdir(dr)) != NULL)
            {
                //cout<<" \n"<<en->d_name; //print all directory name
                currentFile=en->d_name;
                if (currentFile.size()>3)//d_name could be of size 1 or 2 --> TBC why ?  here just to filter those results
                {
                    if (currentFile.substr(currentFile.size()-2,2)=="vm")//fill fileList
                    {
                        cout <<currentFile<<endl;
                        fileList[i]=currentFile;
                        i++;
                    }
                }
            }
            closedir(dr); //close all directory
            
        }
    }
    else
    {
        // if one file directory
        Codewriter assamblyfile(fileList[0]+".asm"); // create a Codewriter object
        assamblyfile.WriteInit(); // write bootstrap code
     //   VMtranslate(inputFileOrDir,assamblyfile);
    }
    return 0;
}
